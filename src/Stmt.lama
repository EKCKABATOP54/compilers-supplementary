-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun readStmt(readRes,x , st){
  [st <- [x, readRes.fst], readRes.snd]
}


fun eval ([st, w], stmt) {
  case stmt of 
   Assn (x,e) -> [st <- [x, evalExpr(st, e)], w]
  | Seq (stmt1, stmt2) -> eval(eval([st, w], stmt1), stmt2)
  | Skip -> [st, w]
  | Read (x) -> readStmt( readWorld(w), x, st)
  | Write (e) -> [st, writeWorld(evalExpr(st, e), w)]
  | _ -> failure("Stnt eval not implemented\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
