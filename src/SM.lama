-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  case insns of
    {} -> c 
  | c_inst:new_inst ->
  case c_inst of
   BINOP (s) -> 
                          case stack of x:y:tail -> eval(env, [evalOp(s, y, x):tail, state, w],new_inst) esac
  | CONST (n)-> 
                          eval(env, [n:stack, state, w], new_inst)
  | READ      ->
                          case readWorld(w) of [n, nw] -> eval(env, [n:stack, state,nw], new_inst) esac
  | WRITE    ->
                          case stack of (x:tail) ->
                          case writeWorld(x, w) of nw -> eval(env, [tail, state,nw], new_inst) 
                          esac
                          esac
  | LD(x)   -> eval(env, [state(x):stack, state, w], new_inst)
  | ST(x)     ->  case stack of (y:tail) 
                          ->
                          eval(env, [tail, state<-[x,y], w], new_inst) 
                  esac
  | LABEL(s)  -> eval(env, c, new_inst)
  | JMP    (s) -> eval(env, c, fromLabel(env, s))
  | CJMP(0, s) -> case stack of b:st -> if (b == 0) then eval(env, [st, state, w], fromLabel(env, s))
                                                        else eval(env, [st, state, w], new_inst) fi esac
  | CJMP(1, s) -> case stack of b:st -> if (b != 0) then eval(env, [st, state, w], fromLabel(env, s))
                                                        else eval(env, [st, state, w], new_inst) fi esac
  esac
       
  esac     
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
      Var (s)           -> singletonBuffer(LD(s))
    | Const (n)         -> singletonBuffer(CONST(n))
    | Binop (s, e1, e2) -> (compileExpr(e1) <+> compileExpr(e2)) <+ BINOP(s)
  esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) ->
            case env.genLabel of 
            [eEvalLabel, env] -> 
            case compile(eEvalLabel, env, s) of
            [_, env, scode] -> [true, env, label(eEvalLabel, true) <+> compileExpr(e) <+ CJMP(0, lab) <+> scode <+ JMP(eEvalLabel)]
            esac
            esac
    | If(e, s1, s2) -> 
                case env.genLabel of
                [s2StartLabel, env] -> case compile(lab, env, s1) of 
                [_, env, s1code] -> case compile(lab, env, s2) of
                [_, env, s2code] -> [true, env, compileExpr(e) <+ CJMP(0,s2StartLabel) <+> s1code <+JMP(lab) <+> label(s2StartLabel, true) <+> s2code]
                esac
                esac
                esac  
    | DoWhile(s, e) ->  case env.genLabel of
                      [eLabel, env] -> 
                      case env.genLabel of
                      [cStartLabel, env] ->
                      case compile(eLabel, env, s) of
                      [eLabelUsed, env, scode]-> [true, env,label(cStartLabel, true) <+> scode <+> label(eLabel, eLabelUsed) <+> compileExpr(e) <+ CJMP(0, lab) <+ JMP(cStartLabel)] 
                      esac
                      esac
                      esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}