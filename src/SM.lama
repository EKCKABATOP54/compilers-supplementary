-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  case insns of
    {} -> c 
  | c_inst:new_inst ->
  case c_inst of
   BINOP (s) -> 
                          case stack of x:y:tail -> eval(env, [evalOp(s, y, x):tail, state, w],new_inst) esac
  | CONST (n)-> 
                          eval(env, [n:stack, state, w], new_inst)
  | READ      ->
                          case readWorld(w) of [n, nw] -> eval(env, [n:stack, state,nw], new_inst) esac
  | WRITE    ->
                          case stack of (x:tail) ->
                          case writeWorld(x, w) of nw -> eval(env, [tail, state,nw], new_inst) 
                          esac
                          esac
  | LD(x)   -> eval(env, [state(x):stack, state, w], new_inst)
  | ST(x)     ->  case stack of (y:tail) 
                          ->
                          eval(env, [tail, state<-[x,y], w], new_inst) 
                  esac
  | LABEL(s)  -> eval(env, c, new_inst)
  | JMP    (s) -> eval(env, c, fromLabel(env, s))
  | CJMP(0, s) -> case stack of b:st -> if (b == 0) then eval(env, [st, state, w], fromLabel(env, s))
                                                        else eval(env, [st, state, w], new_inst) fi esac
  | CJMP(1, s) -> case stack of b:st -> if (b != 0) then eval(env, [st, state, w], fromLabel(env, s))
                                                        else eval(env, [st, state, w], new_inst) fi 
                  esac
  | STI    -> case stack of 
                  v : r : stack -> eval(env, [v:stack, state <- [r, v], w], new_inst)
                esac
  | DUP       -> eval(env, [hd(stack):stack, state, w], new_inst)
  | DROP      -> eval(env, [tl(stack), state, w], new_inst)
  | LDA (x)   -> eval (env, [x:stack, state, w], new_inst)
  | _ -> failure("Invalid evalSM cmd")
  esac
  esac     
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn (e1, e2) ->    case env.genLabels(2) of
    [l1, l2, env] ->      case compile(l1, env, e1) of
    [l1Used,env, code1] -> case compile(l1, env, e2) of
    [l2Used, env, code2] -> [false, env, code1 <+> label(l1, l1Used) <+> code2 <+> label(l2, l2Used) <+ STI] 
    esac
    esac
    esac
    | Seq(e1, e2) -> case env.genLabel of
    [l1, env] -> case compile(l1, env, e1) of
    [l1Used, env, code1] -> case compile(lab, env, e2) of
    [labUsed, env, code2] -> [labUsed, env, code1 <+> label(l1, l1Used) <+> code2]
    esac
    esac
    esac
    | Read(x) -> [false, env, singletonBuffer(READ) <+ ST(x)]
    | Write(e) -> case env.genLabel of
    [l, env] -> case compile(l, env, e) of
    [lUsed, env, code] -> [false, env, code <+> label(l, lUsed) <+ WRITE]
    esac
    esac
    | If(ce, s1, s2) -> 
    case env.genLabels(2) of
    [eLab, s2Lab, env] -> case compile(eLab, env, ce) of
    [eLabUsed, env, cecode] -> case compile(lab, env, s2) of 
    [_, env, s2code] -> case compile(lab, env, s1) of
    [_,env,s1code] -> [true,env, cecode <+> label(eLab, eLabUsed) <+ CJMP(0, s2Lab) <+>  s1code <+ JMP(lab) <+> label(s2Lab, true) <+> s2code]
    esac 
    esac
    esac
    esac
    | While(ce, se) -> case env.genLabels(2) of
    [eLab, sLab, env] -> case compile(sLab, env, ce) of
    [sLabUsed, env, ecode] -> case compile (eLab, env, se) of
    [_, env, secode] -> [true, env, label(eLab, true) <+> ecode <+>label(sLab, sLabUsed) <+ CJMP(0, lab) <+> secode <+JMP(eLab) ]
    esac
    esac 
    esac
    | DoWhile (se, ce)  ->  case env.genLabels(3) of 
                            [ceLab, seLab, endLab, env] -> 
                            case compile(endLab, env, ce) of
                            [endLabUsed, env, ceCode] -> 
                            case compile(ceLab, env, se) of 
                            [ceLabUsed, env, seCode] -> [true, env, label (seLab, true) <+> seCode <+> label(ceLab, ceLabUsed) <+> ceCode <+> label(endLab, endLabUsed) <+ CJMP(0, lab) <+ JMP(seLab)]
                            esac
                            esac
                            esac
    | Binop (op, e1, e2) -> case env.genLabels(2) of
                            [e1L, e2L, env] -> case compile(e1L, env, e1) of
                            [e1LUsed, env, e1code] -> case compile(e2L, env, e2) of
                            [e2LUsed, env, e2code] -> [false, env, e1code <+> label(e1L, e1LUsed) <+> e2code <+> label(e2L, e2LUsed) <+ BINOP(op)]
                            esac
                            esac
                            esac 
    | Ignore (e) -> case env.genLabel of
                    [eLab, env] -> case compile(eLab, env, e) of
                    [eLabUsed, env, eCode] -> [false, env, eCode <+> label(eLab, eLabUsed) <+ DROP]
                    esac
                    esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }



  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
