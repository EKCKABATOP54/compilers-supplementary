-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (re1, e2) -> 
  case eval(c, re1) of
  [c, vare] -> case eval(c, e2) of
  [[s,w], vale] -> [[s <- [vare, vale], w], vale]
  esac
  esac
  | Seq (e1, e2) -> eval(eval(c, e1).fst, e2)
  | Skip -> [c, Void]
  | Read (e) -> case eval(c, e) of
  [[s, w], refV] -> case readWorld(w) of
  [v, w] -> [[s <- [refV, v], w], Void]
  esac
  esac
  | Write (e) -> case eval(c, e) of
  [[s, w], e] -> [[s, writeWorld(e, w)], Void]
  esac
  | If(ce, es1, es2) -> case eval(c, ce) of
  [c, e] -> case e of 
  0 -> eval(c, es2)
  |_ -> eval(c, es1)
  esac
  esac
  | While(ce, de) -> case eval(c, ce) of 
  [c, n] -> case n of
  0   -> eval(c, Seq(de, While(ce, de)))
  | _ -> [c, Void]
  esac
  esac
  | DoWhile(de, ce) -> eval(de, Seq(While(ce, de)))
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, x]
  | Const (ix) -> [c, ix]
  | Binop (op, e1, e2) -> case eval(c, e1) of
  [c, e1] -> case eval(c, e2) of 
  [c, e2] -> [c, evalOp(op, e1, e2)]
  esac
  esac
  | Ignore(e) -> case eval(c, e) of
  [c, _] -> [c, Void]
  esac
  esac
}




-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
