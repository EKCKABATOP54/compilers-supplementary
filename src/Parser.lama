-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

var exp = memo   $ eta expr(
        {
          [Left, {[s("!!"), fun (l, op, r) {Binop(op, l, r)}]}], 
          [Left, {[s("&&"), fun (l, op, r) {Binop(op, l, r)}]}], 
          [Nona, {
            [s("=="), fun (l, op, r) {Binop(op, l, r)}],
            [s("!="), fun (l, op, r) {Binop(op, l, r)}],
            [s("<="), fun (l, op, r) {Binop(op, l, r)}],
            [s("<"), fun (l, op, r) {Binop(op, l, r)}],
            [s(">="), fun (l, op, r) {Binop(op, l, r)}],
            [s(">"), fun (l, op, r) {Binop(op, l, r)}]
            }], 
          [Left, {
            [s("+"), fun (l, op, r) {Binop(op, l, r)}],
            [s("-"), fun (l, op, r) {Binop(op, l, r)}]
            }
          ],
          [Left, {
            [s("*"), fun (l, op, r) {Binop(op, l, r)}],
            [s("/"), fun (l, op, r) {Binop(op, l, r)}],
            [s("%"), fun (l, op, r) {Binop(op, l, r)}]
            }
          ]
        },primary);

var elifStmt = memo $ eta syntax (
    x=exp kThen y=stmt                 {If(x, y, Skip)}
  | x=exp kThen y=stmt kElse z=stmt    {If(x, y, z)}
  | x=exp kThen y=stmt kElif z=elifStmt {If(x, y, z)}
);

var simpleStmt = memo $ eta syntax (
    kSkip {Skip}
  | x=lident s[":="] e=exp {Assn (x, e)}
  | kRead x=inbr[s("("), lident, s(")")]          {Read(x)}
  | kWrite e=inbr[s("("), exp , s(")")]           {Write(e)}
  | kIf e=exp kThen s1=stmt  kFi                  {If(e, s1, Skip)}
  | kIf e=exp kThen s1=stmt kElse s2=stmt kFi     {If (e, s1, s2)}
  | kIf e=exp kThen s1=stmt kElif s2=elifStmt kFi {If(e, s1, s2)}
  | kWhile e=exp kDo s=stmt kOd                   {While(e, s)}
  | kDo s=stmt kWhile e=exp kOd                   {DoWhile(s, e)}
  | kFor s1=simpleStmt s[","] e=exp s[","] s2=simpleStmt kDo s3=stmt kOd {Seq(s1, While(e, Seq(s3, s2)))}
);

var stmt = memo $ eta syntax(
    simpleStmt
  | s1=simpleStmt s[";"] s2=stmt {Seq(s1, s2)}


);
   

-- Public top-level parser
public parse = stmt;